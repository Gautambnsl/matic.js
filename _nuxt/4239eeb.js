(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{223:function(e,n,t){"use strict";t.r(n);var o={components:{Layout:t(176).a}},r=t(14),component=Object(r.a)(o,(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("Layout",{attrs:{title:"Unstoppable Domains setup",description:"Get started with maticjs",keywords:"pos client, erc20, withdrawExit, polygon, sdk",contentSrc:"/home/runner/work/matic.js/matic.js/content/docs/setup/unstoppable-domains.md"}},[t("h1",{attrs:{id:"unstoppabledomains"}},[e._v("Unstoppable Domains")]),e._v(" "),t("p",[e._v("The "),t("a",{attrs:{href:"https://github.com/unstoppabledomains/resolution"}},[e._v("unstoppable domains")]),e._v(" library aims to be a complete and compact library for interacting with NFT domain names. You can use them to retrieve "),t("a",{attrs:{href:"https://docs.unstoppabledomains.com/crypto-payments/"}},[e._v("payment addresses")]),e._v(", IPFS hashes for "),t("a",{attrs:{href:"https://docs.unstoppabledomains.com/d-websites/"}},[e._v("decentralized websites")]),e._v(", DNS records, and other "),t("a",{attrs:{href:"https://docs.unstoppabledomains.com/getting-started/domain-registry-essentials/records-reference/"}},[e._v("records types")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"setupunstoppabledomains"}},[e._v("Setup Unstoppable Domains")]),e._v(" "),t("p",[e._v("Unstoppable Domains support is available via a separate package as a plugin for matic.js.")]),e._v(" "),t("h3",{attrs:{id:"installation"}},[e._v("Installation")]),e._v(" "),t("pre",[t("code",[e._v("npm install @unstoppabledomains/maticjs-resolution\n")])]),e._v(" "),t("h3",{attrs:{id:"setup"}},[e._v("setup")]),e._v(" "),t("pre",[t("code",[e._v("import { use } from '@maticnetwork/maticjs'\nimport { UnstoppableDomainsClientPlugin } from '@unstoppabledomains/maticjs-resolution'\n\n// install unstoppable domains plugin\nuse(UnstoppableDomainsClientPlugin)\n")])]),e._v(" "),t("p",[e._v("Let's see one example of resolving wallet address, domain records, and IPFS hash using unstoppable domains -")]),e._v(" "),t("pre",[t("code",[e._v("import HDWalletProvider from \"@truffle/hdwallet-provider\"\nimport { POSClient,use } from \"@maticnetwork/maticjs\"\nimport { Web3ClientPlugin } from '@maticnetwork/maticjs-web3'\nimport { UnstoppableDomainsClientPlugin } from '@unstoppabledomains/maticjs-resolution'\n\n// install unstoppable domains plugin\nuse(Web3ClientPlugin);\nuse(UnstoppableDomainsClientPlugin);\n\nconst posClient = new POSClient();\nawait posClient.init({\n    network: 'testnet',\n    version: 'mumbai',\n    parent: {\n      provider: new HDWalletProvider(privateKey, mainRPC),\n      defaultConfig: {\n        from : fromAddress\n      }\n    },\n    child: {\n      provider: new HDWalletProvider(privateKey, childRPC),\n      defaultConfig: {\n        from : fromAddress\n      }\n    }\n});\nconst client = posClient.client;\n\n// Resolve a token address from a domain\nconst addr = await client.resolution.addr('brad.crypto', 'ETH');\nconsole.log(`Ethereum address for brad.crypto is ${addr}`);\n\n// Resolve all records from a domain\nconst records = await client.resolution.allRecords('brad.crypto');\nconsole.log(`All records for brad.crypto are ${JSON.stringify(records)}`);\n\n// Resolve an ipfs hash from a domain\nconst ipfsHash = await client.resolution.ipfsHash('homecakes.crypto');\nconsole.log(`IPFS hash for homecakes.crypto is ${ipfsHash}`);\n")])]),e._v(" "),t("h2",{attrs:{id:"examples"}},[e._v("Examples")]),e._v(" "),t("p",[e._v("The examples for different cases are available on "),t("a",{attrs:{href:"https://github.com/unstoppabledomains/maticjs-resolution"}},[e._v("unstoppable domains plugin repo")]),e._v(".")])])}),[],!1,null,null,null);n.default=component.exports}}]);