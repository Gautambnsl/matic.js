(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{208:function(n,e,t){"use strict";t.r(e);var o={components:{Layout:t(176).a}},r=t(14),component=Object(r.a)(o,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("Layout",{attrs:{title:"ExitUtil",description:"matic.js internally use ExitUtil for generating proof",keywords:"exit util, api type, read, write, polygon",contentSrc:"/home/runner/work/matic.js/matic.js/content/docs/advanced/exit-util.md"}},[t("h1",{attrs:{id:"exitutil"}},[n._v("ExitUtil")]),n._v(" "),t("p",[t("code",[n._v("matic.js")]),n._v(" internally use "),t("code",[n._v("ExitUtil")]),n._v(" for generating proof. It is a class which has different methods for helping with exit utilities.")]),n._v(" "),t("h2",{attrs:{id:"buildpayloadforexit"}},[n._v("buildPayloadForExit")]),n._v(" "),t("p",[n._v("It exposes "),t("code",[n._v("buildPayloadForExit")]),n._v(" method which can be used to generate proof.")]),n._v(" "),t("pre",[t("code",[n._v('import { ExitUtil, RootChain, use, Web3SideChainClient } from "@maticnetwork/maticjs";\nimport { Web3ClientPlugin } from "@maticnetwork/maticjs-web3";\nimport HDWalletProvider from "@truffle/hdwallet-provider";\nimport { from, privateKey, RPC } from "./config";\nuse(Web3ClientPlugin);\n\n\nconst client = new Web3SideChainClient<any>();\n// initiate client\nawait client.init({\n    // log: true,\n    network: \'testnet\',\n    version: \'mumbai\',\n    parent: {\n        provider: new HDWalletProvider(privateKey, RPC.parent),\n        defaultConfig: {\n            from\n        }\n    },\n    child: {\n        provider: new HDWalletProvider(privateKey, RPC.child),\n        defaultConfig: {\n            from\n        }\n    }\n});\n\n// create root chain instance\nconst rootChain = new RootChain(client, <root chain address>);\n\n// create exitUtil Instance\nconst exitUtil = new ExitUtil(client, rootChain);\n\n// generate proof\nconst proof = await exitUtil.buildPayloadForExit(\n    <burn tx hash>,\n    <log event signature>,\n    <isFast>\n)\n')])]),n._v(" "),t("h3",{attrs:{id:"generatingproofusingbridgeclient"}},[n._v("Generating proof using bridge client")]),n._v(" "),t("p",[n._v("Every bridge client including "),t("strong",[n._v("POSClient")]),n._v(", "),t("strong",[n._v("PlasmaClient")]),n._v(" exposes "),t("code",[n._v("exitUtil")]),n._v(" property.")]),n._v(" "),t("pre",[t("code",[n._v("import { POSClient,use } from \"@maticnetwork/maticjs\"\nimport { Web3ClientPlugin } from '@maticnetwork/maticjs-web3'\nimport HDWalletProvider from \"@truffle/hdwallet-provider\"\n\n// install web3 plugin\nuse(Web3ClientPlugin);\n\nconst posClient = new POSClient();\nawait posClient.init({\n    network: 'testnet',\n    version: 'mumbai',\n    parent: {\n      provider: new HDWalletProvider(privateKey, mainRPC),\n      defaultConfig: {\n        from : fromAddress\n      }\n    },\n    child: {\n      provider: new HDWalletProvider(privateKey, childRPC),\n      defaultConfig: {\n        from : fromAddress\n      }\n    }\n});\n\nconst proof = await posClient.exitUtil.buildPayloadForExit(\n    <burn tx hash>,\n    <log event signature>,\n    <isFast>\n)\n")])]),n._v(" "),t("h3",{attrs:{id:"exampletogeneratebatchproofsandexit"}},[n._v("Example to generate batch proofs and exit")]),n._v(" "),t("p",[n._v("Every bridge client including "),t("strong",[n._v("POSClient")]),n._v(", "),t("strong",[n._v("PlasmaClient")]),n._v(" exposes "),t("code",[n._v("exitUtil")]),n._v(" property.")]),n._v(" "),t("pre",[t("code",[n._v("import { POSClient,use } from \"@maticnetwork/maticjs\"\nimport { Web3ClientPlugin } from '@maticnetwork/maticjs-web3'\nimport HDWalletProvider from \"@truffle/hdwallet-provider\"\n// install web3 plugin\nuse(Web3ClientPlugin);\nconst posClient = new POSClient();\nawait posClient.init({\n    network: 'testnet',\n    version: 'mumbai',\n    parent: {\n      provider: new HDWalletProvider(privateKey, mainRPC),\n      defaultConfig: {\n        from : fromAddress\n      }\n    },\n    child: {\n      provider: new HDWalletProvider(privateKey, childRPC),\n      defaultConfig: {\n        from : fromAddress\n      }\n    }\n});\nconst payloads = await posClient.exitUtil.buildMultiplePayloadsForExit(\n    <burn tx hash>,\n    <log event signature>\n)\nfor(payload of paylaods) {\n    const result = await posClient.rootChainManager.exit(payload)\n}\n")])])])}),[],!1,null,null,null);e.default=component.exports}}]);